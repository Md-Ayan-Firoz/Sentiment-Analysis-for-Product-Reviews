import pandas as pd
import numpy as np
import re
import string
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from wordcloud import WordCloud

df = pd.read_csv(r"C:\Users\ayanf\Downloads\amazon.csv")
df.head()


print(f"Dataset Shape : {df.shape}")
print(f"Column Names : {df.columns}")
df.isnull().sum()
df.dropna(inplace = True)
print(f"Dataset Shape After removing NULL values : {df.shape}")
df.dtypes
df.rename(columns={'reviewText': 'review'}, inplace=True)
df.head()
print(f"Rating value count : \n{df['overall'].value_counts()}")


# Bar plot to visulalize the total counts for each rating.

df['overall'].value_counts().plot.bar(color='skyblue')
plt.title("Rating Distribution Count")
plt.xlabel("Ratings")
plt.xticks(rotation=0)
plt.ylabel("Count")
plt.show()


print(f"Rating in Percentage Distribution : \n{round(df['overall'].value_counts()/df.shape[0]*100,2)}")

rating_counts = df['overall'].value_counts()

# Define colors, explode, and other properties
colors = ('red', 'green', 'orange', 'pink', 'yellow')
explode = (0.4, 0.4, 0.4, 0.4, 0.4)  # Slightly separate the slices
wedge_properties = {'linewidth': 1, 'edgecolor': 'black'}

# Create the pie chart
fig, ax = plt.subplots(figsize=(7, 7))
ax.pie(rating_counts, labels=rating_counts.index, autopct='%1.1f%%', startangle=90,
       colors=colors, explode=explode, wedgeprops=wedge_properties, shadow=True)

# Add a title below the pie chart
plt.xlabel('Percentage-wise Distribution of Ratings', fontsize=14, labelpad=20)

# Adjust layout to make space for the title
plt.subplots_adjust(bottom=0.2)

# Show the plot
plt.show()

# Map 'overall' ratings to sentiment
sentiment_map = {1: 'negative', 2: 'negative', 3: 'neutral', 4: 'positive', 5: 'positive'}
df['sentiment'] = df['overall'].map(sentiment_map)

# Clean text data
def clean_text(text):
    text = text.lower()
    text = re.sub(f"[{string.punctuation}]", "", text)
    text = re.sub(r'\d+', '', text)
    text = re.sub(r'\s+', ' ', text).strip()
    return text

df['cleaned_review'] = df['review'].astype(str).apply(clean_text)

df['word_count'] = df['cleaned_review'].apply(lambda x: len(x.split()))

# Convert text to numerical representation using TF-IDF
vectorizer = TfidfVectorizer(max_features=5000)
X = vectorizer.fit_transform(df['cleaned_review']).toarray()
y = df['sentiment'].map({'positive': 1, 'negative': 0, 'neutral': 2})

# Apply PCA for dimensionality reduction
pca = PCA(n_components=100)
X_pca = pca.fit_transform(X)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_pca, y, test_size=0.2, random_state=42)

# Train SVM model for sentiment classification
svm_model = SVC(kernel='linear')
svm_model.fit(X_train, y_train)

# Make predictions
y_pred = svm_model.predict(X_test)

# Evaluate model performance
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')
print("Classification Report:")
print(classification_report(y_test, y_pred, zero_division=1))

# Display confusion matrix
plt.figure(figsize=(8,6))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, cmap='Blues', fmt='d', 
            xticklabels=['Negative', 'Neutral', 'Positive'], 
            yticklabels=['Negative', 'Neutral', 'Positive'])
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Linear Regression model
lr_model = LinearRegression()
lr_model.fit(X_train, y_train)

# Make predictions
y_pred = lr_model.predict(X_test)

# Evaluate model performance
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error: {mse:.2f}")
print(f"RÂ² Score: {r2:.2f}")

# Scatter plot to compare actual vs predicted ratings
plt.figure(figsize=(8,6))
sns.scatterplot(x=y_test, y=y_pred, alpha=0.6)
plt.xlabel("Actual Ratings")
plt.ylabel("Predicted Ratings")
plt.title("Actual vs Predicted Ratings (Linear Regression)")
plt.axline((0, 0), slope=1, color="red", linestyle="--")  # Perfect Prediction Line
plt.show()
